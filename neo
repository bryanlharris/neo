#!/usr/bin/perl -w

use strict;
use Getopt::Lucid qw( :all );
use Expect;

sub mkpass {
    my $com = q/apg -n 1 -m 10 -x 10 -a 1 -E IilL10oO,.\'\"-_\!\`\;:\|\{\}\[]\(\)\<\>\\%\$?\&\^\@ -l/;
    exec $com;
}

sub neo_help {
my @quote = <<'        FINIS' =~ /\s*,(.*)/g;;
,NAME
,       neo - NeoSpire utility to search the pinky file and login to computers
,
,SYNOPSIS
,       neo [ modifiers ] [ options ] [ regular expression ]
,       neo [ modifiers ] [ options ] [ IP address ]
,
,DESCRIPTION
,
,       To use this, you will have to install the necessary modules.
,       E.g. perl -MCPAN -eshell and then install <module>[enter] at the prompt.
,
,OPTIONS
,
,       help, -h, --help
,           Print the help message
,
,       mkpass, --mkpass
,           Create a random password.  Requires the ``apg'' package.
,
,       search [QUERY], --search=[QUERY]
,           Search the passwords file on pinky for [QUERY], which is a regular
,           expression.  All searches are case insensitive.
,           Files searched: {mds,nix,win,domain-trust,netdev}-passwords
,
,       [ssh|rdp|pix] [IP], --login=[IP]
,           Login to a device at [IP].  To prevent multiple matches, a space
,           character is appended to the [IP] string.
,
,MODIFIERS
,
,       screen, --screen
,           Valid for ssh login.  Run screen inside remote ssh session.
,
,       showpasswords, --showpasswords
,           Valid for searches.  Show passwords for search results.  If you don't
,           this, you will only see pound signs in the password field.
,
,EXAMPLES
,
,       To search for the ns1 server and subsequently login to it.
,
,           $ neo search ns1
,           NeoSpire cns1.neospire.net 66.111.111.3 ###### xx root
,           NeoSpire ns1.neospire.net 66.111.111.5 ###### xx root
,           NeoSpire rns1-1.neospire.net 64.74.122.162 ###### xx root
,           NeoSpire rns1-2.neospire.net 64.74.122.163 ###### xx root
,           $ neo ssh 66.111.111.5
,           spawn ssh -p 22 -Y -l root -o StrictHostKeyChecking=no 66.111.111.5
,           Password: 
,           Last login: Thu Apr  9 06:29:55 2009 from xob.neospire.net
,           Linux ns1.neospire.net 2.6.10-fai-p3 #1 SMP Thu Jan 20 10:24:53 CST 2005 i686 GNU/Linux
,
,           The programs included with the Debian GNU/Linux system are free software;
,           the exact distribution terms for each program are described in the
,           individual files in /usr/share/doc/*/copyright.
, 
,           Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
,           permitted by applicable law.
,           ns1# 
,
,       To search using a regular expression pattern instead of just a string of
,       text.
,
,           $ neo search \ ns1[.]neospire[.]net
,           NeoSpire ns1.neospire.net 66.111.111.5 N+uR/hv4ph xx root
,
,           $ neo search ^NeoSpire.*lvs[12]
,           NeoSpire lvs1.neospire.net 66.111.111.61 B8**ep7?yH xx root
,           NeoSpire lvs2.neospire.net 66.111.111.62 /kE@PH&@d^ xx root
,
,       To login to a pix.
,
,           $ neo pix 10.2.136.1
,           spawn ssh pix@10.2.136.1
,           pix@10.2.136.1's password:
,           Type help or '?' for a list of available commands.
,           fw1> en
,           Password: **********
,           fw1# (Now you are logged in)
,
,       To RDP to a server.
,
,           $ neo rdp 4.2.2.2
,           (A remote desktop window pops up)
,
,NOTES/CAVEATS
,
,       * During either a pix or an ssh session, you can type ctrl-x ctrl-z to put
,         the remote session into the background.
,
,THE END
        FINIS

    open LESS, "|less";
    print LESS " $_\n" foreach (@quote);
    close LESS;
}

sub save_local_cache {
    my @passwords = `ssh pinky sudo cat a/{pix,mds,nix,win,domain-trust,netdev}-passwords`;
    open PASSWORDS, ">$ENV{HOME}/passwords";
    print PASSWORDS $_ foreach (@passwords);
    close PASSWORDS;
    chmod 0600, "$ENV{HOME}/passwords";
}

sub search {
    my ($query,$show_passwords) = @_;
    &save_local_cache unless -e "$ENV{HOME}/passwords";
    open PASSWORDS, "$ENV{HOME}/passwords";
    my @info = grep /$query/i, <PASSWORDS>;
    close PASSWORDS;

    if ($show_passwords and $query =~ /new0/i) {
        /^(new0) +(.*?)$/i and printf "%s\n", $2 foreach (@info);
        exit 0;
    }

    print "-" x 80 . "\n";
    /^(.*?) +(.*?) +(.*?) +(.*?) +(.*?) +(.*?)$/ and
        printf "%-14.14s %-28.28s %-15.15s %-12.12s %-7.7s\n",
            $1,
            $2,
            $3,
            $show_passwords ? $4 : "############",
            $6
        foreach (@info);
    print "-" x 80 . "\n";
}

sub get_info {
    my ($query) = @_;
    my @results = `neo --showpasswords search $query`;
    my $line;
    /\b$query\b/ and $line = $_ and last foreach (@results);
    my ($computername,$ip,$password) = (split / +/, $line)[1,2,3];
    $ip = $1 if $ip =~
        /((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))/;
    return ($computername,$ip,$password);
}

sub ssh_login {
    my ($computername,$ip,$password,$screen) = @_;

    my @boulevards = qw/
        66.111.96.222
        66.111.96.224
        66.111.96.225
        66.111.96.223
        66.111.96.221
        66.111.96.226
        66.111.96.227
        66.111.96.228
        66.111.96.229
        /;

    my @quote = <<'        FINIS' =~ /\s*(.*)/g;
        #!/usr/bin/expect -f
        set timeout -1
        spawn ssh -t -p _PORT_ -Y -l root -o StrictHostKeyChecking=no _IP__SCREEN_
        match_max 100000
        expect -re "assword"
        send -- "_PASSWORD_\r"
        expect -re "(#.* )|(Press Space or Return to end)"
        send -- "exec bash\r"
        expect -re "# "
        send -- "export PS1='\\n\[\$USER\@\$HOSTNAME:\$PWD\]\\n# '\r"
        expect -re "# "
        set CTRLX \030
        interact {
            -reset $CTRLX {exec kill -STOP [pid]}
        }
        exit
        FINIS

    $screen == 1 and s/_SCREEN_/ screen/g foreach (@quote);
    $screen != 1 and s/_SCREEN_//g foreach (@quote);
    grep { $ip =~ /$_/ } @boulevards and s/_PORT_/1022/g foreach (@quote);
    grep { $ip =~ /$_/ } @boulevards or s/_PORT_/22/g foreach (@quote);
    s/_IP_/$ip/g foreach (@quote);
    $password =~ s/\$/\\\$/g;
    s/_PASSWORD_/$password/g foreach (@quote);

    open TMP, ">/tmp/neo";
    print TMP "$_\n" foreach (@quote);
    system("/usr/bin/expect -f /tmp/neo");
}

sub pix_login {
    my ($debug,$ip) = @_;

    if ($debug == 0) {
        chomp(my @lines = grep /NEW0/, `neo debug pix $ip`);
        s/NEW0 // and s/\015//g foreach @lines;
        my ($password,$enable) = @lines;
        my $stars = "*" x length $enable;
        my @quote = <<'            FINIS' =~ /\s*(.*)/g;;
            #!/usr/bin/expect -f

            set timeout -1
            spawn ssh -p 22 -o StrictHostKeyChecking=no pix@_IP_
            match_max 100000
            expect -exact "pix@_IP_'s password: "
            send -- "_PASSWORD_\r"
            expect -exact "\r
            Type help or '?' for a list of available commands.\r"
            expect -exact "> "
            send -- "en\r"
            expect -exact "en\r
            Password: "
            send -- "_ENABLE_"
            expect -exact "_STARS_"
            send -- "\r"
            expect -exact "\r"
            expect -exact "# "
            set CTRLX \030
            interact {
                -reset $CTRLX {exec kill -STOP [pid]}
            }
            FINIS

        s/_IP_/$ip/g foreach (@quote);
        s/_PASSWORD_/$password/g foreach (@quote);
        s/_ENABLE_/$enable/g foreach (@quote);
        s/_STARS_/$stars/ foreach (@quote);

        open TMP, ">/tmp/neo";
        print TMP "$_\n" foreach (@quote);
        system("/usr/bin/expect -f /tmp/neo");

    } elsif ($debug == 1) {
        my $exp = new Expect;
        $exp->spawn("ssh", ("pinky")) or die "Cannot spawn ssh: $!\n";
        $exp->expect(1,
            [ '[(]yes[/]no[)][?]' => sub {  my $exp = shift;
                                            $exp->send("yes\n");
                                            &exp_continue; } ],
            [ '[@]pinky[:][~][$] ' => sub { &exp_continue; } ],
            );
        $exp->send("sudo su -\n");
        $exp->expect(0, 'pinky# ');
        $exp->send("cd /no*\n");
        $exp->send("grep -h \'NEW\' pixpass\n");
        $exp->expect(0, 'pinky# ');
        $exp->send("logout\n");
        $exp->expect(0, 'pinky:~$ ');
        $exp->send("logout\n");
        $exp->expect(0, 'eof');
        $exp->soft_close();
    }
}

sub rdp_login {
    my ($computername,$ip,$password) = @_;
    $computername = $1 if $computername =~ /.*?\.(.*?)/;

    my @isn = qw/
        10.2.38.
        /;
    my @informed = qw/
        10.2.18.
        10.2.37.
        /;

    my $user = "sqltest";
    grep { $ip =~ /$_/ } @isn and $user = "ISN-PUBLIC\\\\sqltest";
    grep { $ip =~ /$_/ } @isn and $password = 's8Nu7g!pLb';
    grep { $ip =~ /$_/ } @informed and $user = "IDC\\\\sqltest";
    grep { $ip =~ /$_/} @informed and $password = 'h8G9r72w$';
    system("echo '$password' | rdesktop -a 16 -g 1024x768 -u $user -p - $ip &");
}

my @specs = (
    Param("search"),
    Param("ssh"),
    Param("pix"),
    Param("rdp"),
    Switch("screen"),
    Switch("showpasswords"),
    Switch("mkpass"),
    Switch("help|h")->anycase(),
    Switch("debug")->default(0),
);

my $options = Getopt::Lucid->getopt( \@specs );

my $debug           = $options->get_debug;
my $query           = $options->get_search;
my $ssh_ip          = $options->get_ssh;
my $pix_ip          = $options->get_pix;
my $rdp_ip          = $options->get_rdp;
my $screen          = $options->get_screen;
my $show_passwords  = $options->get_showpasswords;

&neo_help                               if $options->get_help;
&search($query,$show_passwords)         if $options->get_search;
&ssh_login(&get_info($ssh_ip),$screen)  if $options->get_ssh;
&pix_login($debug,$pix_ip)              if $options->get_pix;
&rdp_login(&get_info($rdp_ip))          if $options->get_rdp;
&mkpass                                 if $options->get_mkpass;

